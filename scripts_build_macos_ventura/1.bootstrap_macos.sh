#!/bin/bash
set -e
export CMAKE_OSX_ARCHITECTURES=$(uname -m)

echo -e "\nüçè [BOOTSTRAP] Inicjalizacja ≈õrodowiska pod Qt 6.9.0 + MariaDB (macOS Ventura+)\n"

# ==========================================
# Krok 1: Sprawdzenie systemu
# ==========================================
OS_VERSION=$(sw_vers -productVersion)
if [[ "$OS_VERSION" < "13.0" ]]; then
  echo "‚ùå Ten skrypt wymaga macOS Ventura (13.0) lub nowszego."
  exit 1
fi

echo "‚úÖ Wykryto macOS $OS_VERSION"

# ==========================================
# Krok 2: Sprawdzenie Xcode i SDK
# ==========================================
if ! xcode-select -p &>/dev/null; then
  echo "‚ùå Xcode Command Line Tools nie sƒÖ zainstalowane."
  echo "üîß Uruchom: xcode-select --install"
  exit 1
fi

XCODE_VERSION=$(xcodebuild -version | grep Xcode | awk '{print $2}')
SDK_VERSION=$(xcrun --sdk macosx --show-sdk-version)

echo "üîç Wykryto Xcode $XCODE_VERSION, SDK $SDK_VERSION"

# ==========================================
# Bonus: pe≈Çna lista dostƒôpnych SDK i decyzja usera
# ==========================================
echo -e "\nüîé Sprawdzam dostƒôpne SDK:"
AVAILABLE_SDKS=$(xcodebuild -showsdks | grep macosx | awk '{print $NF}' | sed 's/macosx//g' | sort -V)
echo "‚û°Ô∏è  Znalezione SDK macOS: $AVAILABLE_SDKS"

SDK_MIN="14.0"
SDK_OK=false

for ver in $AVAILABLE_SDKS; do
  if [[ "$(printf '%s\n' "$ver" "$SDK_MIN" | sort -V | head -n1)" == "$SDK_MIN" ]]; then
    SDK_OK=true
    break
  fi
done

if [[ "$SDK_OK" == false ]]; then
  echo -e "\n‚ö†Ô∏è  Qt 6.9.0 oficjalnie wymaga SDK >= 14.0 (w szczeg√≥lno≈õci przy budowie Qt ze ≈∫r√≥de≈Ç)"
  echo "Twoja aktualna wersja SDK to: $SDK_VERSION"
  echo
  echo "üõ†Ô∏è  Je≈õli u≈ºywasz gotowego Qt 6.9.0 (np. z MaintenanceTool), to SDK 13.x mo≈ºe byƒá wystarczajƒÖce"
  echo "   ‚Äî pod warunkiem, ≈ºe nie korzystasz z funkcji wymagajƒÖcych nowego API."
  echo
  echo "üì• Aby zainstalowaƒá SDK 14+, pobierz Xcode 15.2:"
  echo "üîó https://download.developer.apple.com/Developer_Tools/Xcode_15.2/Xcode_15.2.xip"
  echo
  echo "üìå Po instalacji ustaw aktywne Xcode:"
  echo "   sudo xcode-select -s /Applications/Xcode.app"
  echo

  read -p "‚ùì Czy mimo to chcesz kontynuowaƒá z SDK $SDK_VERSION? (y/n) " answer
  if [[ "$answer" != "y" ]]; then
    echo "üö™ Zako≈Ñczono. Zainstaluj Xcode z SDK 14+ i uruchom ponownie."
    exit 1
  else
    echo "‚û°Ô∏è Kontynuujemy z SDK $SDK_VERSION ‚Äî na odpowiedzialno≈õƒá u≈ºytkownika."
  fi
else
  echo "‚úÖ SDK >= 14.0 dostƒôpny ‚Äî OK"
fi

# ==========================================
# Krok 3: Instalacja pakiet√≥w Homebrew
# ==========================================
echo -e "\nüç∫ Instalujƒô wymagane pakiety przez Homebrew..."

brew update
brew install cmake ninja git mariadb openssl@3 pkg-config sqlite3 icu4c

echo "‚úÖ Pakiety zainstalowane"

# ==========================================
# Krok 4: Wyb√≥r Qt
# ==========================================
echo
read -p "üìÇ Czy chcesz u≈ºyƒá w≈Çasnej instalacji Qt 6.9.0? (y/n) " choice
if [[ "$choice" == "y" ]]; then
    DEFAULT_QT_PATH="$HOME/Qt/6.9.0/macos"
    read -p "üîç Podaj ≈õcie≈ºkƒô do katalogu Qt [$DEFAULT_QT_PATH]: " QT_PATH
    QT_PATH="${QT_PATH:-$DEFAULT_QT_PATH}"
  if [[ ! -d "$QT_PATH" ]]; then
    echo "‚ùå B≈ÇƒÖd: Podana ≈õcie≈ºka nie istnieje."
    exit 1
  fi
  echo "‚úÖ Qt PATH ustawiony na: $QT_PATH"
  export QT_PATH
  export PATH="$QT_PATH/bin:$PATH"
  export CMAKE_PREFIX_PATH="$QT_PATH"
  export QMAKE="$QT_PATH/bin/qmake"

  echo "üîç Szukam ≈∫r√≥de≈Ç Qt (qtbase/src/plugins/sqldrivers)..."
  CANDIDATES=(
    "$(dirname "$QT_PATH")/Src"
    "$(dirname "$(dirname "$QT_PATH")")/Src"
    "$QT_PATH/Src"
  )

  QT_SRC_PATH=""
  for candidate in "${CANDIDATES[@]}"; do
    test_path="$candidate/qtbase/src/plugins/sqldrivers"
    echo "üîé Sprawdzam: $test_path"
    if [[ -d "$test_path" ]]; then
      QT_SRC_PATH="$candidate"
      echo "‚úÖ Wykryto ≈∫r√≥d≈Ça Qt: $QT_SRC_PATH"
      break
    fi
  done

  if [[ -n "$QT_SRC_PATH" ]]; then
    export QT_SRC_PATH
  else
    echo -e "\nüõë Nie znaleziono katalogu qtbase/src/plugins/sqldrivers w ≈ºadnej z pr√≥b:"
    for candidate in "${CANDIDATES[@]}"; do
      echo "   ‚úñ $candidate"
    done
    echo
    echo "üìå Upewnij siƒô, ≈ºe Qt zosta≈Ço zainstalowane z komponentem 'Sources'"
    echo "üîó Lub pobierz rƒôcznie z: https://download.qt.io/official_releases/qt/6.9/6.9.0/single/"
  fi
else
  QT_PATH=""
  echo -e "\nüì• Qt 6.9.0 zostanie pobrane i zbudowane lokalnie w kolejnym kroku (build_qt.sh)"
fi

# ==========================================
# Krok 5: Utworzenie katalogu build/
# ==========================================
mkdir -p build
echo "‚úÖ Utworzono katalog build/"

# ==========================================
# Krok 6: Informacja ko≈Ñcowa
# ==========================================
if [[ -n "$QT_PATH" && -d "$QT_SRC_PATH/qtbase/src/plugins/sqldrivers" ]]; then

  echo -e "\n‚úÖ ≈örodowisko gotowe do budowy pluginu QMYSQL i projektu Inwentaryzacja"
  echo "‚û°Ô∏è  Kolejny krok: ./2.build_qt_mysql_plugin_macos.sh"
else
  echo -e "\nüõë Zatrzymujemy siƒô tutaj ‚Äî kolejny krok to build_qt.sh (pe≈Çna kompilacja Qt ze ≈∫r√≥de≈Ç)"
fi

# ==========================================
# Krok 7: Zapis do qt_env.sh
# ==========================================
echo "export QT_PATH=\"$QT_PATH\"" > qt_env.sh
echo "export QT_SRC_PATH=\"$QT_SRC_PATH\"" >> qt_env.sh
echo "# (Wygenerowano automatycznie przez bootstrap_macos.sh)" >> qt_env.sh
