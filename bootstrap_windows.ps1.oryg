# Requires -Version 5.0
# ----------------------------------------------------------------------------
# Bootstrap script for Windows 10/11 (PowerShell)
# - Installs Chocolatey (if missing) and required packages
# - Sets up vcpkg (manifest mode) with libmariadb + openssl
# - Re‑uses an existing binary Qt (recommended) or can build Qt from source
# - Builds & installs the Inwentaryzacja project into build/install
# ----------------------------------------------------------------------------

param(
    [string]$QtDir = "C:\Qt\6.8.2\mingw_64",   # path to pre‑installed Qt; empty -> build from src (slow)
    [string]$QtVersion = "6.8.2",                # used only when building from source
    [switch]$Msvc = $false                        # use MSVC toolchain (default = MinGW)
)

$ErrorActionPreference = "Stop"
$ProjectDir = Get-Location
$VcpkgDir   = "$ProjectDir\vcpkg"
$QtSrcDir   = "$ProjectDir\qt-src"
$QtBuildDir = "$ProjectDir\qt-build"
$QtInstall  = if ($QtDir) { $QtDir } else { "$ProjectDir\qt" }
$Triplet    = if ($Msvc) { "x64-windows" } else { "x64-mingw-dynamic" }

function Fail($msg) { Write-Host "ERROR: $msg" -ForegroundColor Red; exit 1 }

# ---------------------------------------------------------------------------
function Ensure-Choco {
    if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
        Write-Host "Installing Chocolatey…"
        Set-ExecutionPolicy Bypass -Scope Process -Force
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    }
}

function Install-SystemDeps {
    Write-Host "Installing system dependencies via choco…"
    $pkgs = @(
        'git', 'cmake', 'ninja',
        'mingw',            # toolchain (ignored if -Msvc)
        'pkgconfiglite',
        'openssl',          # runtime
        'mariadb-connector-c'
    )
    if ($Msvc) { $pkgs += 'visualstudio2022buildtools' }
    choco install -y $pkgs
}

function Setup-Vcpkg {
    if (-not (Test-Path $VcpkgDir)) {
        git clone https://github.com/microsoft/vcpkg.git $VcpkgDir
    } else {
        git -C $VcpkgDir pull
    }
    & "$VcpkgDir\bootstrap-vcpkg.bat" -disableMetrics
    $baseline = (& git -C $VcpkgDir rev-parse HEAD).Trim()
    (Get-Content vcpkg.json) -replace '"builtin-baseline":\s*"[^"]*"', "\"builtin-baseline\": \"$baseline\"" | Set-Content vcpkg.json
    & "$VcpkgDir\vcpkg.exe" install --triplet $Triplet
}

function Build-QtFromSource {
    if ($QtDir) { Write-Host "Using Qt at $QtDir"; return }
    Write-Host "Downloading Qt $QtVersion sources…"
    $url = "https://download.qt.io/archive/qt/$($QtVersion.Substring(0,3))/$QtVersion/single/qt-everywhere-src-$QtVersion.zip"
    Invoke-WebRequest $url -OutFile qt.zip
    Expand-Archive qt.zip -DestinationPath .
    Rename-Item "qt-everywhere-src-$QtVersion" qt-src
    New-Item -ItemType Directory $QtBuildDir | Out-Null
    Push-Location $QtBuildDir
    & "$QtSrcDir\configure.bat" -prefix $QtInstall -opensource -confirm-license -nomake examples -nomake tests -release -skip qtquick3d -skip qtgraphs -skip qtquick3dphysics -no-warnings-are-errors
    cmake --build . --config Release
    cmake --install . --config Release
    Pop-Location
}

function Build-Project {
    New-Item -ItemType Directory build | Out-Null
    Push-Location build
    $toolchain = "$VcpkgDir\scripts\buildsystems\vcpkg.cmake"
    cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$toolchain -DVCPKG_TARGET_TRIPLET=$Triplet -DCMAKE_PREFIX_PATH=$QtInstall
    cmake --build . --config Release
    cmake --install . --config Release
    Pop-Location
}

# ---------------------------------------------------------------------------
Ensure-Choco
Install-SystemDeps
Setup-Vcpkg
Build-QtFromSource
Build-Project
Write-Host "`nBUILD FINISHED. Launch via build/install/bin/Inwentaryzacja.bat" -ForegroundColor Green
