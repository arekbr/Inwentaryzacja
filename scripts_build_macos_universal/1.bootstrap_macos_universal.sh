#!/bin/bash
set -e

echo -e "\nüçè [BOOTSTRAP UNIVERSAL] Inicjalizacja ≈õrodowiska dla Universal macOS Build (Intel + Apple Silicon)\n"

# ==========================================
# Krok 1: Wykrywanie architektury systemu
# ==========================================
HOST_ARCH=$(uname -m)
OS_VERSION=$(sw_vers -productVersion)

if [[ "$OS_VERSION" < "13.0" ]]; then
  echo "‚ùå Ten skrypt wymaga macOS Ventura (13.0) lub nowszego."
  exit 1
fi

echo "‚úÖ Wykryto macOS $OS_VERSION na architekturze $HOST_ARCH"

# ==========================================
# Krok 2: Wyb√≥r trybu budowania
# ==========================================
echo -e "\nüìã Dostƒôpne tryby budowania:"
echo "1) Universal Binary (x86_64 + arm64) - zalecane"
echo "2) Native ($HOST_ARCH only)"
echo "3) Intel only (x86_64)"
echo "4) Apple Silicon only (arm64)"

read -p "‚ùì Wybierz tryb (1-4) [1]: " BUILD_MODE
BUILD_MODE="${BUILD_MODE:-1}"

case $BUILD_MODE in
  1)
    export CMAKE_OSX_ARCHITECTURES="x86_64;arm64"
    export BUILD_TYPE="universal"
    echo "üéØ Wybrano: Universal Binary (x86_64 + arm64)"
    ;;
  2)
    export CMAKE_OSX_ARCHITECTURES="$HOST_ARCH"
    export BUILD_TYPE="native"
    echo "üéØ Wybrano: Native build ($HOST_ARCH)"
    ;;
  3)
    export CMAKE_OSX_ARCHITECTURES="x86_64"
    export BUILD_TYPE="intel"
    echo "üéØ Wybrano: Intel only (x86_64)"
    ;;
  4)
    export CMAKE_OSX_ARCHITECTURES="arm64"
    export BUILD_TYPE="arm64"
    echo "üéØ Wybrano: Apple Silicon only (arm64)"
    ;;
  *)
    echo "‚ùå Nieprawid≈Çowy wyb√≥r"
    exit 1
    ;;
esac

# ==========================================
# Krok 3: Sprawdzenie Xcode i SDK
# ==========================================
if ! xcode-select -p &>/dev/null; then
  echo "‚ùå Xcode Command Line Tools nie sƒÖ zainstalowane."
  echo "üîß Uruchom: xcode-select --install"
  exit 1
fi

XCODE_VERSION=$(xcodebuild -version | grep Xcode | awk '{print $2}')
SDK_VERSION=$(xcrun --sdk macosx --show-sdk-version)

echo "üîç Wykryto Xcode $XCODE_VERSION, SDK $SDK_VERSION"

# Sprawdzenie wymaga≈Ñ dla universal builds
if [[ "$BUILD_TYPE" == "universal" ]]; then
  XCODE_MAJOR=$(echo $XCODE_VERSION | cut -d. -f1)
  if [[ "$XCODE_MAJOR" -lt "15" ]]; then
    echo "‚ö†Ô∏è  Universal builds zalecajƒÖ Xcode 15+ dla najlepszej kompatybilno≈õci"
    read -p "‚ùì Kontynuowaƒá mimo to? (y/n) " answer
    if [[ "$answer" != "y" ]]; then
      exit 1
    fi
  fi
fi

# ==========================================
# Krok 4: Instalacja pakiet√≥w Homebrew
# ==========================================
echo -e "\nüç∫ Instalujƒô wymagane pakiety przez Homebrew..."

# Dla universal builds potrzebujemy czasem obie architektury
if [[ "$BUILD_TYPE" == "universal" && "$HOST_ARCH" == "arm64" ]]; then
  echo "üîÑ Dla universal build na Apple Silicon, sprawdzam dostƒôpno≈õƒá Intel binaries..."
  
  # Instalacja podstawowych pakiet√≥w
  brew update
  brew install cmake ninja git mariadb openssl@3 pkg-config sqlite3 icu4c
  
  # Sprawdzenie czy mamy te≈º Intel homebrew (Rosetta)
  if [[ -d "/usr/local/Homebrew" ]]; then
    echo "‚úÖ Wykryto Intel Homebrew - mo≈ºliwy full universal build"
    export INTEL_BREW_PREFIX="/usr/local"
    export ARM_BREW_PREFIX="/opt/homebrew"
  else
    echo "‚ö†Ô∏è  Brak Intel Homebrew - universal build bƒôdzie oparty na ARM + cross-compile"
    export ARM_BREW_PREFIX="/opt/homebrew"
  fi
else
  brew update
  brew install cmake ninja git mariadb openssl@3 pkg-config sqlite3 icu4c
fi

echo "‚úÖ Pakiety zainstalowane"

# ==========================================
# Krok 5: Konfiguracja Qt dla universal builds
# ==========================================
echo -e "\nüì± Konfiguracja Qt..."

read -p "üìÇ Czy chcesz u≈ºyƒá w≈Çasnej instalacji Qt 6.9.0? (y/n) " choice
if [[ "$choice" == "y" ]]; then
  if [[ "$BUILD_TYPE" == "universal" ]]; then
    echo "üîç Dla universal build potrzebujesz Qt skompilowane jako universal binary"
    echo "üìå Opcje:"
    echo "   1) Qt z MaintenanceTool (sprawd≈∫ czy ma universal support)"
    echo "   2) W≈Çasne Qt zbudowane jako universal"
    echo "   3) Osobne instalacje Qt dla ka≈ºdej architektury"
    
    read -p "‚ùì Kt√≥rƒÖ opcjƒô wybierasz? (1/2/3) " qt_option
    
    case $qt_option in
      1|2)
        DEFAULT_QT_PATH="$HOME/Qt/6.9.0/macos"
        read -p "üîç Podaj ≈õcie≈ºkƒô do katalogu Qt [$DEFAULT_QT_PATH]: " QT_PATH
        QT_PATH="${QT_PATH:-$DEFAULT_QT_PATH}"
        
        if [[ ! -d "$QT_PATH" ]]; then
          echo "‚ùå B≈ÇƒÖd: Podana ≈õcie≈ºka nie istnieje."
          exit 1
        fi
        
        # Sprawdzenie czy Qt ma universal binaries
        if file "$QT_PATH/bin/qmake" | grep -q "universal binary"; then
          echo "‚úÖ Qt ma universal binaries"
          export QT_PATH
          export QT_UNIVERSAL=true
        else
          echo "‚ö†Ô∏è  Qt nie ma universal binaries - bƒôdzie single-arch build"
          export QT_PATH
          export QT_UNIVERSAL=false
        fi
        ;;
      3)
        read -p "üîç Podaj ≈õcie≈ºkƒô do Qt Intel (x86_64): " QT_PATH_INTEL
        read -p "üîç Podaj ≈õcie≈ºkƒô do Qt ARM (arm64): " QT_PATH_ARM
        
        if [[ ! -d "$QT_PATH_INTEL" || ! -d "$QT_PATH_ARM" ]]; then
          echo "‚ùå B≈ÇƒÖd: Jedna z podanych ≈õcie≈ºek nie istnieje."
          exit 1
        fi
        
        export QT_PATH_INTEL
        export QT_PATH_ARM
        export QT_DUAL_ARCH=true
        ;;
    esac
  else
    # Single architecture build
    DEFAULT_QT_PATH="$HOME/Qt/6.9.0/macos"
    read -p "üîç Podaj ≈õcie≈ºkƒô do katalogu Qt [$DEFAULT_QT_PATH]: " QT_PATH
    QT_PATH="${QT_PATH:-$DEFAULT_QT_PATH}"
    
    if [[ ! -d "$QT_PATH" ]]; then
      echo "‚ùå B≈ÇƒÖd: Podana ≈õcie≈ºka nie istnieje."
      exit 1
    fi
    
    export QT_PATH
  fi
  
  # Wyszukiwanie ≈∫r√≥de≈Ç Qt
  echo "üîç Szukam ≈∫r√≥de≈Ç Qt..."
  if [[ "$QT_DUAL_ARCH" == "true" ]]; then
    # Sprawd≈∫ ≈∫r√≥d≈Ça dla pierwszej architektury
    CANDIDATES=(
      "$(dirname "$QT_PATH_INTEL")/Src"
      "$(dirname "$(dirname "$QT_PATH_INTEL")")/Src"
      "$QT_PATH_INTEL/Src"
    )
  else
    CANDIDATES=(
      "$(dirname "$QT_PATH")/Src"
      "$(dirname "$(dirname "$QT_PATH")")/Src"
      "$QT_PATH/Src"
    )
  fi

  QT_SRC_PATH=""
  for candidate in "${CANDIDATES[@]}"; do
    test_path="$candidate/qtbase/src/plugins/sqldrivers"
    if [[ -d "$test_path" ]]; then
      QT_SRC_PATH="$candidate"
      echo "‚úÖ Wykryto ≈∫r√≥d≈Ça Qt: $QT_SRC_PATH"
      break
    fi
  done

  if [[ -z "$QT_SRC_PATH" ]]; then
    echo "üõë Nie znaleziono ≈∫r√≥de≈Ç Qt - plugin QMYSQL bƒôdzie pomijany"
  fi
  
  export QT_SRC_PATH
else
  echo "üì• Qt zostanie pobrane i zbudowane lokalnie (nie implementowane w tym skrypcie)"
  echo "‚ùå Dla uproszczenia, u≈ºyj gotowej instalacji Qt"
  exit 1
fi

# ==========================================
# Krok 6: Utworzenie katalogu build
# ==========================================
mkdir -p build

# ==========================================
# Krok 7: Zapis konfiguracji
# ==========================================
echo "üíæ Zapisywanie konfiguracji..."

cat > qt_env_universal.sh <<EOF
# Wygenerowano automatycznie przez bootstrap_macos_universal.sh
# $(date)

export BUILD_TYPE="$BUILD_TYPE"
export CMAKE_OSX_ARCHITECTURES="$CMAKE_OSX_ARCHITECTURES"
export HOST_ARCH="$HOST_ARCH"

EOF

if [[ "$QT_DUAL_ARCH" == "true" ]]; then
cat >> qt_env_universal.sh <<EOF
export QT_DUAL_ARCH="true"
export QT_PATH_INTEL="$QT_PATH_INTEL"
export QT_PATH_ARM="$QT_PATH_ARM"
EOF
else
cat >> qt_env_universal.sh <<EOF
export QT_PATH="$QT_PATH"
export QT_UNIVERSAL="$QT_UNIVERSAL"
EOF
fi

if [[ -n "$QT_SRC_PATH" ]]; then
  echo "export QT_SRC_PATH=\"$QT_SRC_PATH\"" >> qt_env_universal.sh
fi

if [[ -n "$INTEL_BREW_PREFIX" ]]; then
  echo "export INTEL_BREW_PREFIX=\"$INTEL_BREW_PREFIX\"" >> qt_env_universal.sh
fi

if [[ -n "$ARM_BREW_PREFIX" ]]; then
  echo "export ARM_BREW_PREFIX=\"$ARM_BREW_PREFIX\"" >> qt_env_universal.sh
fi

echo "‚úÖ Konfiguracja zapisana do qt_env_universal.sh"

# ==========================================
# Krok 8: Informacja ko≈Ñcowa
# ==========================================
echo -e "\nüéâ Bootstrap zako≈Ñczony!"
echo "üìã Konfiguracja:"
echo "   ‚Ä¢ Tryb budowania: $BUILD_TYPE"
echo "   ‚Ä¢ Architektura(y): $CMAKE_OSX_ARCHITECTURES"
echo "   ‚Ä¢ ≈πr√≥d≈Ça Qt: ${QT_SRC_PATH:-"brak"}"

if [[ -n "$QT_SRC_PATH" ]]; then
  echo -e "\n‚û°Ô∏è  Kolejny krok: ./2.build_qt_mysql_plugin_macos_universal.sh"
else
  echo -e "\n‚û°Ô∏è  Kolejny krok: ./4.build_inwentaryzacja_macos_universal.sh (pomijajƒÖc plugin MySQL)"
fi

echo -e "\nüí° Aby za≈Çadowaƒá ≈õrodowisko w nowej sesji:"
echo "   source qt_env_universal.sh"
