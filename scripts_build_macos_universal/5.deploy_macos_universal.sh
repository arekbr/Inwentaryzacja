#!/bin/bash
set -e

APP_NAME="Inwentaryzacja"
DEPLOY_DIR="deploy"

echo -e "\nüì¶ [DEPLOY UNIVERSAL] Deployment aplikacji (macOS Universal)\n"

# ==========================
# Wczytanie konfiguracji
# ==========================
if [[ ! -f qt_env_universal.sh ]]; then
  echo "‚ùå Brak pliku qt_env_universal.sh. Uruchom najpierw bootstrap."
  exit 1
fi

source qt_env_universal.sh

# ==========================
# Okre≈õlenie ≈õcie≈ºek do aplikacji
# ==========================
case "$BUILD_TYPE" in
  "universal")
    if [[ -f "build_inwentaryzacja_universal/$APP_NAME" ]]; then
      APP_BINARY="build_inwentaryzacja_universal/$APP_NAME"
      PLUGIN_BUILD_DIRS=("build_qt_sql_drivers_universal")
      
      if [[ "$QT_DUAL_ARCH" == "true" ]]; then
        # Dla dual-arch setup, u≈ºyj ARM Qt jako g≈Ç√≥wnego (nowsze)
        PRIMARY_QT_PATH="$QT_PATH_ARM"
        SECONDARY_QT_PATH="$QT_PATH_INTEL"
      else
        PRIMARY_QT_PATH="$QT_PATH"
      fi
    else
      echo "‚ùå Nie znaleziono universal binary aplikacji"
      exit 1
    fi
    ;;
  "native"|"intel"|"arm64")
    if [[ -f "build_inwentaryzacja_${BUILD_TYPE}/$APP_NAME" ]]; then
      APP_BINARY="build_inwentaryzacja_${BUILD_TYPE}/$APP_NAME"
      PLUGIN_BUILD_DIRS=("build_qt_sql_drivers_${BUILD_TYPE}")
      PRIMARY_QT_PATH="$QT_PATH"
    else
      echo "‚ùå Nie znaleziono aplikacji dla $BUILD_TYPE"
      exit 1
    fi
    ;;
  *)
    echo "‚ùå Nieznany BUILD_TYPE: $BUILD_TYPE"
    exit 1
    ;;
esac

echo "üéØ Aplikacja do deployment: $APP_BINARY"
echo "üéØ G≈Ç√≥wny Qt PATH: $PRIMARY_QT_PATH"

# ==========================
# Funkcja kopiowania bibliotek z filtrami architektury
# ==========================
copy_lib_universal() {
  local src_lib=$1
  local dest_dir=$2
  local target_arch=$3  # Opcjonalne: x86_64, arm64, lub universal
  
  if [[ ! -f "$src_lib" ]]; then
    echo "‚ö†Ô∏è  Pominiƒôto brakujƒÖcƒÖ bibliotekƒô: $src_lib"
    return 0
  fi
  
  local lib_name=$(basename "$src_lib")
  local dest_path="$dest_dir/$lib_name"
  
  # Sprawd≈∫ architekturƒô biblioteki
  local lib_archs=$(lipo -archs "$src_lib" 2>/dev/null || echo "unknown")
  
  if [[ -n "$target_arch" && "$target_arch" != "universal" ]]; then
    # Filtruj do konkretnej architektury
    if echo "$lib_archs" | grep -q "$target_arch"; then
      if echo "$lib_archs" | grep -q " "; then
        # Multi-arch - wyciƒÖgnij tylko potrzebnƒÖ
        echo "üì¶ $lib_name ($lib_archs ‚Üí $target_arch)"
        lipo -thin "$target_arch" "$src_lib" -output "$dest_path"
      else
        # Single-arch
        echo "üì¶ $lib_name ($lib_archs)"
        cp "$src_lib" "$dest_path"
      fi
    else
      echo "‚ö†Ô∏è  $lib_name nie ma architektury $target_arch (ma: $lib_archs)"
      return 0
    fi
  else
    # Kopiuj ca≈Ço≈õƒá (dla universal builds)
    echo "üì¶ $lib_name ($lib_archs)"
    cp "$src_lib" "$dest_path"
  fi
}

# ==========================
# Czyszczenie i tworzenie katalogu deploy
# ==========================
echo "üßπ Przygotowywanie katalogu $DEPLOY_DIR..."
rm -rf "$DEPLOY_DIR"
mkdir -p "$DEPLOY_DIR"
mkdir -p "$DEPLOY_DIR/platforms"
mkdir -p "$DEPLOY_DIR/sqldrivers"
mkdir -p "$DEPLOY_DIR/imageformats"

# ==========================
# Kopiowanie aplikacji
# ==========================
echo "üì± Kopiowanie aplikacji..."
cp "$APP_BINARY" "$DEPLOY_DIR/"

# Sprawd≈∫ architekturƒô skopiowanej aplikacji
APP_ARCHS=$(lipo -archs "$DEPLOY_DIR/$APP_NAME" 2>/dev/null || echo "unknown")
echo "‚úÖ Aplikacja skopiowana (architektury: $APP_ARCHS)"

# ==========================
# Kopiowanie plugin√≥w Qt
# ==========================
QT_PLUGIN_DIR="$PRIMARY_QT_PATH/plugins"

echo "üîå Kopiowanie plugin√≥w Qt z $QT_PLUGIN_DIR..."

# Platform plugins
copy_lib_universal "$QT_PLUGIN_DIR/platforms/libqcocoa.dylib" "$DEPLOY_DIR/platforms"
copy_lib_universal "$QT_PLUGIN_DIR/platforms/libqoffscreen.dylib" "$DEPLOY_DIR/platforms"

# SQL drivers (Qt standardowe)
copy_lib_universal "$QT_PLUGIN_DIR/sqldrivers/libqsqlite.dylib" "$DEPLOY_DIR/sqldrivers"

# Image formats
copy_lib_universal "$QT_PLUGIN_DIR/imageformats/libqgif.dylib" "$DEPLOY_DIR/imageformats"
copy_lib_universal "$QT_PLUGIN_DIR/imageformats/libqjpeg.dylib" "$DEPLOY_DIR/imageformats"
copy_lib_universal "$QT_PLUGIN_DIR/imageformats/libqpng.dylib" "$DEPLOY_DIR/imageformats"
copy_lib_universal "$QT_PLUGIN_DIR/imageformats/libqsvg.dylib" "$DEPLOY_DIR/imageformats"

# ==========================
# Kopiowanie zbudowanego pluginu QMYSQL
# ==========================
echo "üîç Szukam zbudowanego pluginu QMYSQL..."

MYSQL_PLUGIN_FOUND=false
for plugin_dir in "${PLUGIN_BUILD_DIRS[@]}"; do
  MYSQL_PLUGIN_PATH="$plugin_dir/plugins/sqldrivers/libqsqlmysql.dylib"
  if [[ -f "$MYSQL_PLUGIN_PATH" ]]; then
    echo "‚úÖ Znaleziono plugin QMYSQL: $MYSQL_PLUGIN_PATH"
    copy_lib_universal "$MYSQL_PLUGIN_PATH" "$DEPLOY_DIR/sqldrivers"
    MYSQL_PLUGIN_FOUND=true
    break
  fi
done

if [[ "$MYSQL_PLUGIN_FOUND" == false ]]; then
  echo "‚ö†Ô∏è  Nie znaleziono pluginu QMYSQL - MySQL nie bƒôdzie dostƒôpny"
fi

# ==========================
# Analiza i kopiowanie zale≈ºno≈õci aplikacji
# ==========================
echo -e "\nüìã Analizowanie zale≈ºno≈õci aplikacji..."

otool -L "$DEPLOY_DIR/$APP_NAME" | awk 'NR>1 {print $1}' | while read -r lib; do
  # Sprawd≈∫ czy to zale≈ºno≈õƒá zewnƒôtrzna (Homebrew, Qt, itp.)
  if [[ "$lib" =~ ^(/usr/local/|/opt/homebrew/|$PRIMARY_QT_PATH) ]]; then
    echo "üì• Kopiowanie zale≈ºno≈õci: $(basename "$lib")"
    copy_lib_universal "$lib" "$DEPLOY_DIR"
  elif [[ "$lib" =~ ^@rpath/ ]]; then
    # @rpath - spr√≥buj znale≈∫ƒá w Qt lib
    lib_name=$(basename "$lib")
    qt_lib="$PRIMARY_QT_PATH/lib/$lib_name"
    if [[ -f "$qt_lib" ]]; then
      echo "üì• Kopiowanie Qt lib: $lib_name"
      copy_lib_universal "$qt_lib" "$DEPLOY_DIR"
    fi
  fi
done

# ==========================
# Analiza zale≈ºno≈õci plugin√≥w
# ==========================
echo -e "\nüîç Analizowanie zale≈ºno≈õci plugin√≥w..."

for plugin_file in "$DEPLOY_DIR/sqldrivers"/*.dylib "$DEPLOY_DIR/platforms"/*.dylib; do
  if [[ -f "$plugin_file" ]]; then
    plugin_name=$(basename "$plugin_file")
    echo "üîç Plugin: $plugin_name"
    
    otool -L "$plugin_file" | awk 'NR>1 {print $1}' | while read -r lib; do
      if [[ "$lib" =~ ^(/usr/local/|/opt/homebrew/) ]]; then
        lib_name=$(basename "$lib")
        if [[ ! -f "$DEPLOY_DIR/$lib_name" ]]; then
          echo "üì• Kopiowanie zale≈ºno≈õci pluginu: $lib_name"
          copy_lib_universal "$lib" "$DEPLOY_DIR"
        fi
      elif [[ "$lib" =~ ^@rpath/ ]]; then
        lib_name=$(basename "$lib")
        qt_lib="$PRIMARY_QT_PATH/lib/$lib_name"
        if [[ -f "$qt_lib" && ! -f "$DEPLOY_DIR/$lib_name" ]]; then
          echo "üì• Kopiowanie Qt lib dla pluginu: $lib_name"
          copy_lib_universal "$qt_lib" "$DEPLOY_DIR"
        fi
      fi
    done
  fi
done

# ==========================
# Fixup install_name dla relocatable app
# ==========================
echo -e "\nüîß Naprawianie ≈õcie≈ºek bibliotek..."

# Funkcja do naprawy install_name
fix_install_names() {
  local target_file=$1
  local is_executable=${2:-false}
  
  if [[ ! -f "$target_file" ]]; then
    return
  fi
  
  echo "üîß Naprawianie: $(basename "$target_file")"
  
  # Napraw ≈õcie≈ºki do bibliotek w deploy/
  otool -L "$target_file" | awk 'NR>1 {print $1}' | while read -r lib; do
    lib_name=$(basename "$lib")
    
    # Je≈õli biblioteka jest w katalogu deploy/
    if [[ -f "$DEPLOY_DIR/$lib_name" ]]; then
      if [[ "$is_executable" == true ]]; then
        # Dla aplikacji: @executable_path/
        install_name_tool -change "$lib" "@executable_path/$lib_name" "$target_file" 2>/dev/null || true
      else
        # Dla bibliotek: @loader_path/
        install_name_tool -change "$lib" "@loader_path/../$lib_name" "$target_file" 2>/dev/null || true
      fi
    fi
  done
}

# Napraw g≈Ç√≥wnƒÖ aplikacjƒô
fix_install_names "$DEPLOY_DIR/$APP_NAME" true

# Napraw wszystkie biblioteki
for lib_file in "$DEPLOY_DIR"/*.dylib; do
  if [[ -f "$lib_file" ]]; then
    fix_install_names "$lib_file" false
  fi
done

# Napraw pluginy
for plugin_file in "$DEPLOY_DIR"/*/*.dylib; do
  if [[ -f "$plugin_file" ]]; then
    fix_install_names "$plugin_file" false
  fi
done

# ==========================
# Utworzenie skryptu uruchamiajƒÖcego
# ==========================
echo "üìù Tworzenie skryptu uruchamiajƒÖcego..."

cat > "$DEPLOY_DIR/run_$APP_NAME.sh" <<EOF
#!/bin/bash
# Automatycznie wygenerowany skrypt uruchamiajƒÖcy

cd "\$(dirname "\$0")"

export QT_QPA_PLATFORM_PLUGIN_PATH=./platforms
export QT_PLUGIN_PATH=./sqldrivers:./imageformats
export DYLD_LIBRARY_PATH=.

echo "üöÄ Uruchamianie $APP_NAME..."
echo "üìÅ Katalog: \$(pwd)"
echo "üèóÔ∏è  Architektura aplikacji: \$(lipo -archs ./$APP_NAME 2>/dev/null || echo 'unknown')"

./$APP_NAME "\$@"
EOF

chmod +x "$DEPLOY_DIR/run_$APP_NAME.sh"

# ==========================
# Weryfikacja deployment
# ==========================
echo -e "\n‚úÖ Deployment zako≈Ñczony!"
echo "üìÅ Katalog: $DEPLOY_DIR/"
echo "üìä Zawarto≈õƒá:"

echo "   üì± Aplikacja: $APP_NAME ($(lipo -archs "$DEPLOY_DIR/$APP_NAME" 2>/dev/null || echo 'unknown'))"
echo "   üîå Pluginy platform: $(ls "$DEPLOY_DIR/platforms/" | wc -l | tr -d ' ') plik√≥w"
echo "   üîå Pluginy SQL: $(ls "$DEPLOY_DIR/sqldrivers/" | wc -l | tr -d ' ') plik√≥w"
echo "   üìö Biblioteki: $(ls "$DEPLOY_DIR"/*.dylib 2>/dev/null | wc -l | tr -d ' ') plik√≥w"

# Sprawdzenie MySQL
if [[ -f "$DEPLOY_DIR/sqldrivers/libqsqlmysql.dylib" ]]; then
  MYSQL_ARCHS=$(lipo -archs "$DEPLOY_DIR/sqldrivers/libqsqlmysql.dylib" 2>/dev/null || echo 'unknown')
  echo "   ‚úÖ MySQL plugin: dostƒôpny ($MYSQL_ARCHS)"
else
  echo "   ‚ö†Ô∏è  MySQL plugin: niedostƒôpny"
fi

echo -e "\nüí° Uruchamianie:"
echo "   cd $DEPLOY_DIR && ./run_$APP_NAME.sh"

echo -e "\n‚û°Ô∏è  Kolejny krok: ./6.run_inwentaryzacja_macos_universal.sh"
